#!/bin/bash

## wx: a METAR parser written in Bash
# (c) 2016 Allyson Bowles

## References:
# http://www.met.tamu.edu/class/metar/quick-metar.html
# http://www.dixwx.com/wxdecoding.htm

## Symbols: (for future use?)
# ❅☽☾☂☃☁⚡♨﹌〰⚐⚑〇

## Dependencies:
#  - bc

#STATION=KMSP
STATION=KMSN
#STATION=KMDW
#DATA_URL="http://weather.noaa.gov/pub/data/observations/metar/stations/$STATION.TXT"
DATA_URL="http://tgftp.nws.noaa.gov/data/observations/metar/stations/$STATION.TXT"
CACHE="$HOME/.cache/wx/metar"
TMP_CACHE="$HOME/.cache/wx/tmp"
TMP_CACHE_INTERVAL=5
TIMEOUT=10

SEPARATOR="#[fg=colour27]#[fg=colour33]"

if `test $(find $TMP_CACHE -mmin +$TMP_CACHE_INTERVAL)`; then
    curl -L --connect-timeout $TIMEOUT --create-dirs -s $DATA_URL | tr "\n" " " > $TMP_CACHE
    if [[ "$?" -eq 0 && `md5sum $TMP_CACHE | awk '{print $1}'` != `md5sum $CACHE | awk '{print $1}'` ]]
    then
        echo "`cat $TMP_CACHE`" >> $(dirname $CACHE)/hist
        cp $TMP_CACHE $CACHE
    fi
fi

metar=`cat $CACHE`
metar() {
    echo $metar
}

remarks() {
    awk -F 'RMK' '{print $2}' <<< $metar
}

rvr() {
    echo $metar | grep -o '\(R[0-9]\+\/[0-9]\+V\?\(M\|P\)[0-9]\+FT\)'
}

phenomena() {
    phen=`awk -F 'RMK' '{print $1}' <<< $metar | grep -o '\(\(+\|-\|\bVC\)\?\b\(MI\|BL\|BC\|SH\|PR\|DR\|TS\|FZ\)\?\(DZ\|IC\|UP\|RA\|PL\|SN\|GR\|SG\|GS\)\?\(BR\|SA\|FU\|HZ\|VA\|PY\|DU\|FG\)\?\(SQ\|FC\|SS\|DS\|PO\)\?\)'`

    case ${phen[0]} in
        +*) qual="heavy" ;;
        -*) qual="light" ;;
        VC*) ;; # vicinity
    esac

    case ${phen[0]} in
        *MI*) desc="shallow" ;;
        *BL*) desc="blowing" ;;
        *BC*) desc="patchy" ;;
        *SH*) desc="showers" ;;
        *PR*) desc="partial" ;;
        *DR*) desc="drifting" ;;
        *TS*) desc="thunderstorms" ;;
        *FZ*) desc="freezing" ;;
    esac

    case ${phen[0]} in
        *DZ*) precip="drizzle" ;;
        *IC*) precip="ice crystals" ;;
        *UP*) ;; # Unknown precipitation
        *RA*) precip="rain" ;;
        *PL*) precip="ice pellets" ;;
        *SN*) precip="snow" ;;
        *GR*) precip="hail" ;;
        *SG*) precip="snow grains" ;;
        *GS*) precip="small hail" ;;
    esac

    case ${phen[0]} in
        *BR*) obsc="mist" ;;
        *SA*) obsc="sand" ;;
        *FU*) obsc="smoke" ;;
        *FG*) obsc="fog" ;;
        *HZ*) obsc="haze" ;;
        *VA*) obsc="volcanic ash" ;;
        *PY*) obsc="spray" ;;
        *DU*) obsc="dust" ;;
    esac

    case ${phen[0]} in
        *SQ*) other="squall" ;;
        *FC*) other="funnel cloud" ;;
        *SS*) other="sandstorm" ;;
        *FC*) other="tornado" ;;
        *DS*) other="dust storm" ;;
        *PO*) other="sand whirls" ;;
    esac

    if [[ -n "$qual" || -n "$desc" || -n "$precip" || -n "$obsc" || -n "$other" ]]
    then
        printf "%s " $qual $desc $precip $obsc $other $SEPARATOR
        exit 0
    else
        exit 1
    fi
}

condition() {
    cond=(`grep -o '\(\(CLR\|SKC\|FEW\|SCT\|BKN\|OVC\|VV\)\([0-9]\+\)\?\(\|TCU\|CB\)\?\)\+' <<< $metar`)
    case ${cond[${#cond[@]} - 1]} in
        CLR*|SKC*) condition="clear" ;;
        FEW*) condition="partly cloudy" ;;
        SCT*) condition="cloudy" ;;
        BKN*) condition="mostly cloudy" ;;
        OVC*) condition="overcast" ;;
        VV*) condition="vertical visibility" ;;
        **) condition="" ;;
    esac

    if [[ -n "$condition" ]]
    then
        printf "%s " $condition $SEPARATOR
        exit 0
    else
        exit 1
    fi
}

visibility() {
    echo $metar | grep -o '\([0-9]\+SM\)'
}

altimeter() {
    echo $metar | grep -o 'A[0-9]\{4\}'
}

wind() {
    wind_direction_speed=`echo $metar | grep -o '\\S\{3\}[0-9]\{2\}\(G[0-9]\{2\}\)\?KT'`
    if test `echo $wind_direction_speed | grep -o 'G[0-9]\{2\}'`
    then
        wind_speed=`echo $wind_direction_speed | grep -o '[0-9]\{2\}G[0-9]\{2\}KT' | awk -F 'G' '{print $1 * 1.151}' | bc`
        gusting=`echo $wind_direction_speed | grep -o 'G[0-9]\{2\}' | awk -F 'G' '{print $2 * 1.151}' | bc`
    else
        wind_speed=`echo $wind_direction_speed | grep -o '[0-9][0-9]KT' | awk -F 'KT' '{print $1 * 1.151}' | bc`
    fi
    wd=`echo $wind_direction_speed | grep -o '^\\S\{3\}'`

    if [[ "$wd" == "VRB" ]]
    then
        wind_direction="variable"
    else
        wd=`echo $wd | bc`
        if ((1<=wd && wd<=11)) || ((347<=wd && wd<=360)); then wind_direction="N"
        elif ((12<=wd && wd<=33)); then wind_direction="NNE"
        elif ((34<=wd && wd<=56)); then wind_direction="NE"
        elif ((57<=wd && wd<=78)); then wind_direction="ENE"
        elif ((79<=wd && wd<=101)); then wind_direction="E"
        elif ((102<=wd && wd<=123)); then wind_direction="ESE"
        elif ((124<=wd && wd<=146)); then wind_direction="SE"
        elif ((147<=wd && wd<=168)); then wind_direction="SSE"
        elif ((167<=wd && wd<=191)); then wind_direction="S"
        elif ((192<=wd && wd<=213)); then wind_direction="SSW"
        elif ((214<=wd && wd<=236)); then wind_direction="SW"
        elif ((237<=wd && wd<=258)); then wind_direction="WSW"
        elif ((259<=wd && wd<=281)); then wind_direction="W"
        elif ((282<=wd && wd<=303)); then wind_direction="WNW"
        elif ((304<=wd && wd<=326)); then wind_direction="NW"
        elif ((327<=wd && wd<=346)); then wind_direction="NNW"
        else
            wind_direction=""
        fi
    fi

    if [[ "$wind_speed" -eq 0 || -z "$wind_speed" ]]
    then
        printf "calm"
    elif test `echo $wind_direction_speed | grep -o 'G[0-9]\{2\}'`
    then
        printf "%s %.0fmph gusting to %.0fmph" $wind_direction $wind_speed $gusting
    else
        printf "%s %.0fmph\n" $wind_direction $wind_speed
    fi
}

_temperature_dewpoint() {
    temperature_dewpoint=`grep -o '\s\([0-9]\{2\}\/[0-9]\{2\}\)\s' <<< $metar`
    read temp dp <<< $(awk -F '/' '{ printf "%d %d", $1, $2 }' <<< $temperature_dewpoint)
}

_degree_conversion() {
    case $2 in
        k|K) bc <<< "$1 + 270" | awk '{printf "%.0fK\n", $0}' ;;
        f|F) bc <<< "$1 * 9 / 5 + 32" | awk '{printf "%.0f°F\n", $0}' ;;
        **) printf "%d°C" $1 ;;
    esac
}

humidity() {
    _temperature_dewpoint
    humidity=$(bc -l <<< "100 * (e((17.625 * $dp)/(243.04 + $dp))/e((17.625 * $temp)/(243.04 + $temp)))")
    printf "%.0f%%" $humidity
}

temp() {
    _temperature_dewpoint
    _degree_conversion $temp $1
}

$1 $2
