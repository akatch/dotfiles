#!/bin/bash

## wx: a METAR parser written in Bash
# (c) 2021 Allyson Bowles

## Usage:
# wx [[ temp [ f|F | c|C | k|K ]] | humidity | wind | altimeter | visibility | rvr | condition | phenomena | metar | remarks | refresh ]

## References:
# http://www.met.tamu.edu/class/metar/quick-metar.html
# http://www.dixwx.com/wxdecoding.htm
# https://en.wikipedia.org/wiki/Wind_chill#North_American_and_United_Kingdom_wind_chill_index
# https://en.wikipedia.org/wiki/Heat_index#Formula

## Dependencies:
# bc

## Constants
STATION=KRYV
#STATION=KMDW
#STATION=KHNB
DATA_URI="data/observations/metar/stations/$STATION.TXT"
DATA_URL="https://tgftp.nws.noaa.gov/$DATA_URI"
CACHE="$HOME/.cache/wx/metar"
TIMEOUT=10
PLATFORM=$(uname)

[[ ! -d "$(dirname $CACHE)" ]] && mkdir -p "$(dirname $CACHE)"
[[ ! -f "$CACHE" ]] && touch $CACHE

# TODO uuoc
metar=`cat $CACHE`

_check_last_modified() {
    last_modified=$(curl -I -s $DATA_URL | grep Last\-Modified | awk -F': ' '{ print $2 }')
    [[ "$last_modified" == "" ]] && return 1

    case $PLATFORM in
        Linux)
            src=$(date --date="$last_modified" +'%s')
            # FIXME are we handling the case where $CACHE is empty?
            cache=$(date -r $CACHE +'%s')
        ;;
        Darwin)
            src=$(date -j -f "%a, %e %b %Y %T %Z" "$last_modified" "+%s" 2&> /dev/null)
            cache=$(stat -f "%m" -q $CACHE)
        ;;
    esac
    [[ "$src" > "$cache" ]] && return 1 || return 0
}

_check_md5sum() {
    case $PLATFORM in
        Linux)
            md5sum $1 | awk '{print $1}'
            ;;
        Darwin)
            md5 $1 | awk '{print $4}'
            ;;
    esac
}

refresh() {
    data=$(curl --connect-timeout $TIMEOUT --create-dirs -s $DATA_URL | tr "\n" " ")
    [[ "$data" != "" &&  $(_check_md5sum <<< $data) != $(_check_md5sum $CACHE) ]] && echo $data > $CACHE
}

metar() {
    echo $metar
}

remarks() {
    awk -F 'RMK' '{print $2}' $CACHE
}

rvr() {
    awk '$0 ~ /\(R\[0-9\]\+\/\[0-9\]\+V?\(M\|P\)\[0-9\]\+FT\)/' $CACHE
}

phenomena() {
    phen=`awk -F 'RMK' '{print $1}' <<< $metar | grep -o '\(\(+\|-\|\bVC\)\?\b\(MI\|BL\|BC\|SH\|PR\|DR\|TS\|FZ\)\?\(DZ\|IC\|UP\|RA\|PL\|SN\|GR\|SG\|GS\)\?\(BR\|SA\|FU\|HZ\|VA\|PY\|DU\|FG\)\?\(SQ\|FC\|SS\|DS\|PO\)\?\)'`

    case ${phen[0]} in
        +*) qual="heavy" ;;
        -*) qual="light" ;;
        VC*) ;; # vicinity
    esac

    case ${phen[0]} in
        *MI*) desc="shallow" ;;
        *BL*) desc="blowing" ;;
        *BC*) desc="patchy" ;;
        *SH*) desc="showers" ;;
        *PR*) desc="partial" ;;
        *DR*) desc="drifting" ;;
        *TS*) desc="thunderstorms" ;;
        *FZ*) desc="freezing" ;;
    esac

    case ${phen[0]} in
        *DZ*) precip="drizzle" ;;
        *IC*) precip="ice crystals" ;;
        *UP*) ;; # Unknown precipitation
        *RA*) precip="rain" ;;
        *PL*) precip="ice pellets" ;;
        *SN*) precip="snow" ;;
        *GR*) precip="hail" ;;
        *SG*) precip="snow grains" ;;
        *GS*) precip="small hail" ;;
    esac

    case ${phen[0]} in
        *BR*) obsc="mist" ;;
        *SA*) obsc="sand" ;;
        *FU*) obsc="smoke" ;;
        *FG*) obsc="fog" ;;
        *HZ*) obsc="haze" ;;
        *VA*) obsc="volcanic ash" ;;
        *PY*) obsc="spray" ;;
        *DU*) obsc="dust" ;;
    esac

    case ${phen[0]} in
        *SQ*) other="squall" ;;
        *FC*) other="funnel cloud" ;;
        *SS*) other="sandstorm" ;;
        *FC*) other="tornado" ;;
        *DS*) other="dust storm" ;;
        *PO*) other="sand whirls" ;;
    esac

    if [[ -n "$qual" || -n "$desc" || -n "$precip" || -n "$obsc" || -n "$other" ]]
    then
        printf " %s" $qual $desc $precip $obsc $other
        exit 0
    else
        exit 1
    fi
}

condition() {
    cond=$(grep -o '\(\(CLR\|SKC\|FEW\|SCT\|BKN\|OVC\|VV\)\([0-9]\+\)\?\(\|TCU\|CB\)\?\)\+' $CACHE)
    case ${cond[${#cond[@]} - 1]} in
        CLR*|SKC*) condition="clear" ;;
        FEW*) condition="partly cloudy" ;;
        SCT*) condition="cloudy" ;;
        BKN*) condition="mostly cloudy" ;;
        OVC*) condition="overcast" ;;
        VV*) condition="vertical visibility" ;;
        **) condition="" ;;
    esac

    printf " %s" $condition
}

visibility() {
    grep -o '\([0-9]\+SM\)' $CACHE
}

altimeter() {
    grep -o 'A[0-9]\{4\}' $CACHE
}

_wind_speed_conversion() {
    cf=1
    case $2 in
        kph|KPH) cf=1.852 ;;
        mph|MPH) cf=1.151 ;;
        **) ;;
    esac
    bc <<< "$1 * $cf"
}

_wind_speed(){
    read wind_speed gusting <<< $(grep -o '\([0-9]\{2\}G\)\?[0-9]\{2\}KT' $CACHE | awk -F 'G' '{ printf "%d %d", $1, $2 }')
}

_wind_direction() {
    wd=$(printf "%.3s" $(grep -o '\(VRB\|[0-9]\{3\}\)\([0-9]\{2\}G\)\?[0-9]\{2\}KT' $CACHE))

    if [[ "$wd" == "VRB" ]]
    then
        wind_direction="variable"
        return 0
    fi

    wd=`echo $wd | bc`
    if ((1<=wd && wd<=78)) || ((347<=wd && wd<=360)); then
        if ((1<=wd && wd<=11)) || ((347<=wd && wd<=360)); then wind_direction="N"
        elif ((12<=wd && wd<=33)); then wind_direction="NNE"
        elif ((34<=wd && wd<=56)); then wind_direction="NE"
        elif ((57<=wd && wd<=78)); then wind_direction="ENE"
        fi
    elif ((79<=wd && wd<=168)); then
        if ((79<=wd && wd<=101)); then wind_direction="E"
        elif ((102<=wd && wd<=123)); then wind_direction="ESE"
        elif ((124<=wd && wd<=146)); then wind_direction="SE"
        elif ((147<=wd && wd<=168)); then wind_direction="SSE"
        fi
    elif ((167<=wd && wd<=258)); then
        if ((167<=wd && wd<=191)); then wind_direction="S"
        elif ((192<=wd && wd<=213)); then wind_direction="SSW"
        elif ((214<=wd && wd<=236)); then wind_direction="SW"
        elif ((237<=wd && wd<=258)); then wind_direction="WSW"
        fi
    elif ((259<=wd && wd<=346)); then
        if ((259<=wd && wd<=281)); then wind_direction="W"
        elif ((282<=wd && wd<=303)); then wind_direction="WNW"
        elif ((304<=wd && wd<=326)); then wind_direction="NW"
        elif ((327<=wd && wd<=346)); then wind_direction="NNW"
        fi
    fi
}

wind() {
    _wind_speed
    _wind_direction

    if [[ "$wind_speed" -eq 0 || -z "$wind_speed" ]]; then
        printf "calm"
    elif [[ "$gusting" -eq 0 ]]; then
        printf "%s %.0fmph" $wind_direction $(_wind_speed_conversion $wind_speed mph)
    else
        printf "%s %.0f-%.0fmph" $wind_direction $(_wind_speed_conversion $wind_speed mph) $(_wind_speed_conversion $gusting mph)
    fi
}

_temperature_dewpoint() {
    temperature_dewpoint=$(grep -o '\s\(M\)\?\([0-9]\{2\}\/\(M\)\?[0-9]\{2\}\)\s' $CACHE)
    read temp dp <<< $(awk -F '/' '{ printf "%d %d", $1, $2 }' <<< $(echo $temperature_dewpoint | sed 's/M/-/g'))
}

_temperature_conversion() {
    case $2 in
        k|K) bc <<< "$1 + 270" | awk '{printf "%.0fK", $0}' ;;
        f|F) bc <<< "$1 * 9 / 5 + 32" | awk '{printf "%.0f°F", $0}' ;;
        **) printf "%.0f°C" $1 ;;
    esac
}

_relative_humidity() {
    humidity=$(bc -l <<< "100 * (e((17.625 * $dp)/(243.04 + $dp))/e((17.625 * $temp)/(243.04 + $temp)))")
}

humidity() {
    _temperature_dewpoint
    _relative_humidity
    printf "%.0f%%" $humidity
}

temp() {
    _temperature_dewpoint
    _temperature_conversion $temp $1
}

wind_chill() {
    _temperature_dewpoint
    _wind_speed
    # bc does not support floating point exponents
    y=$(awk -v "wc=$wind_speed" 'BEGIN {print wc**0.16}')
    wind_chill=$(bc <<< "13.12 + (0.6215 * $temp) - (11.37 * $y) + (0.3965 * $temp * $y)")
    _temperature_conversion $wind_chill $1
}

heat_index() {
    _temperature_dewpoint
    _relative_humidity
    c1="-8.78469475556"
    c2="1.61139411"
    c3="2.33854883889"
    c4="-0.14611605"
    c5="-0.012308094"
    c6="-0.0164248277778"
    c7="0.002211732"
    c8="0.00072546"
    c9="-0.000003582"
    heat_index=$(bc <<< "$c1 + ($c2 * $temp) + ($c3 * $humidity) + ($c4 * $temp * $humidity) + ($c5 * $temp ^ 2) + ($c6 * $humidity ^ 2) + ($c7 * $temp ^ 2 * $humidity) + ($c8 * $temp * $humidity ^ 2) + ($c9 * $temp ^ 2 * $humidity ^ 2)")
    _temperature_conversion $heat_index $1
}

summary() {
    temp f
    phenomena || condition
}

"$@" && _check_last_modified || refresh
